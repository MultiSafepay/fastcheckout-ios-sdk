#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef FASTCHECKOUTKIT_SWIFT_H
#define FASTCHECKOUTKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FastcheckoutKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class FCOAnalyticsEvent;
@class FCOErrorAnalyticsEvent;

/// Implement this protocol to get notified with analytics events
SWIFT_PROTOCOL_NAMED("AnalyticsDelegate")
@protocol FCOAnalyticsDelegate
/// This delegate describes if it was fired an analytics event
/// \param event Analytics event
///
- (void)fastcheckoutDidTrackAnalyticsEvent:(FCOAnalyticsEvent * _Nonnull)event;
/// This delegate describes if it was fired an error analytics event
/// \param event Analytics error event
///
- (void)fastcheckoutDidTrackErrorAnalyticsEvent:(FCOErrorAnalyticsEvent * _Nonnull)event;
@end

enum FCOAnalyticsEventType : NSInteger;
@class NSString;

/// This class describe the type, name and parameters of a valid analytics event
SWIFT_CLASS_NAMED("AnalyticsEvent")
@interface FCOAnalyticsEvent : NSObject <NSCopying>
/// Event’s type
@property (nonatomic, readonly) enum FCOAnalyticsEventType type;
/// Event’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Event’s parameters
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable parameters;
- (nonnull instancetype)initWithType:(enum FCOAnalyticsEventType)type name:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nullable)parameters OBJC_DESIGNATED_INITIALIZER;
/// Generates a copy of a AnalyticsEvent object
/// \param zone Zone
///
///
/// returns:
/// AnalyticsEvent copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// List of valid analytics events
typedef SWIFT_ENUM_NAMED(NSInteger, FCOAnalyticsEventType, "AnalyticsEventType", open) {
/// Cart was shown
  FCOAnalyticsEventTypeShowCart = 0,
/// An address was added
  FCOAnalyticsEventTypeAddAddress = 1,
/// An address was deleted
  FCOAnalyticsEventTypeDeleteAddress = 2,
/// Delivery step was reached
  FCOAnalyticsEventTypeStartDelivery = 3,
/// Delivery step completed successfully
  FCOAnalyticsEventTypeCompleteDelivery = 4,
/// Payment step was reached
  FCOAnalyticsEventTypeStartPayment = 5,
/// Payment step was completed successfully
  FCOAnalyticsEventTypeCompletePayment = 6,
/// Payment selected failed
  FCOAnalyticsEventTypeFailedPayment = 7,
/// A giftcard was added
  FCOAnalyticsEventTypeAddGiftcard = 8,
/// A screen was visited
  FCOAnalyticsEventTypeScreenVisited = 9,
};

@class NSNumber;

/// This class describe the data that belongs to
/// a balance
SWIFT_CLASS_NAMED("Balance")
@interface FCOBalance : NSObject <NSCopying>
/// Amount in balance
@property (nonatomic, readonly, copy) NSString * _Nonnull amount;
/// Amount value
@property (nonatomic, readonly) double value;
/// Generates a copy of a Balance object
/// \param zone Zone
///
///
/// returns:
/// Balance copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// BiometricAuthentication could be in three different states:
/// <ul>
///   <li>
///     UNKNOWN:  BiometricAuthentication is not available (device does not support it/user has not being prompted about BiometricAuthentication)
///   </li>
///   <li>
///     ENABLED:  BiometricAuthentication is enabled
///   </li>
///   <li>
///     DISABLED: BiometricAuthentication is disabled
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, FCOBiometricAuthenticationStatus, "BiometricAuthenticationStatus", open) {
/// FaceID/TouchID is not available (device does not support it/user has not being prompted about FaceID/TouchID)
  FCOBiometricAuthenticationStatusUnknown = 0,
/// FaceID/TouchID is enabled
  FCOBiometricAuthenticationStatusEnabled = 1,
/// FaceID/TouchID is disabled
  FCOBiometricAuthenticationStatusDisabled = 2,
};


SWIFT_CLASS_NAMED("CardType")
@interface FCOCardType : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// This class describe the colors to be used in the SDK
SWIFT_CLASS_NAMED("Colors")
@interface FCOColors : NSObject <NSCopying>
/// Main color
@property (nonatomic, readonly, strong) UIColor * _Nonnull primaryColor;
/// Secondary color (background of cells)
@property (nonatomic, readonly, strong) UIColor * _Nonnull secondaryColor;
/// Main text color
@property (nonatomic, readonly, strong) UIColor * _Nonnull primaryTextColor;
/// Color used to show details that are not in focus
@property (nonatomic, readonly, strong) UIColor * _Nonnull secondaryTextColor;
/// Controller’s background color
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Initialize a new Colors instance
/// \param primaryColor Main color
///
/// \param secondaryColor Secondary color
///
/// \param primaryTextColor Main text color
///
/// \param secondaryTextColor Secondary text color
///
/// \param backgroundColor Background color
///
///
/// returns:
/// Colors instance
- (nonnull instancetype)initWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor primaryTextColor:(UIColor * _Nonnull)primaryTextColor secondaryTextColor:(UIColor * _Nonnull)secondaryTextColor backgroundColor:(UIColor * _Nonnull)backgroundColor OBJC_DESIGNATED_INITIALIZER;
/// Generates a copy of a Colors object
/// \param zone Zone
///
///
/// returns:
/// Colors copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FCOConsumerStatus, "ConsumerStatus", open) {
  FCOConsumerStatusOpen = 0,
  FCOConsumerStatusPaid = 1,
  FCOConsumerStatusDeclined = 2,
  FCOConsumerStatusPending = 3,
  FCOConsumerStatusNeedpayment = 4,
  FCOConsumerStatusUndefined = 5,
};


SWIFT_CLASS_NAMED("CreditcardType")
@interface FCOCreditcardType : FCOCardType
@property (nonatomic, readonly, copy) NSString * _Nonnull number;
@property (nonatomic, readonly, copy) NSString * _Nonnull expiryDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DebitcardType")
@interface FCODebitcardType : FCOCardType
@property (nonatomic, readonly, copy) NSString * _Nonnull iban;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class describe the data that belongs to
/// the current device
SWIFT_CLASS_NAMED("DeviceInfo")
@interface FCODeviceInfo : NSObject <NSCopying>
/// Device’s token
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Device’s OS
@property (nonatomic, readonly, copy) NSString * _Nonnull os;
/// Generates a copy of a DeviceInfo object
/// \param zone Zone
///
///
/// returns:
/// DeviceInfo copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum FCOErrorAnalyticsEventType : NSInteger;

/// This class describe the type and reason of an error analytics event
SWIFT_CLASS_NAMED("ErrorAnalyticsEvent")
@interface FCOErrorAnalyticsEvent : NSObject <NSCopying>
@property (nonatomic, readonly) enum FCOErrorAnalyticsEventType type;
/// Error reason
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
- (nonnull instancetype)initWithType:(enum FCOErrorAnalyticsEventType)type reason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
/// Generates a copy of a ErrorAnalyticsEvent object
/// \param zone Zone
///
///
/// returns:
/// ErrorAnalyticsEvent copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// List of different detected errors
typedef SWIFT_ENUM_NAMED(NSInteger, FCOErrorAnalyticsEventType, "ErrorAnalyticsEventType", open) {
/// A parsing error was detected
  FCOErrorAnalyticsEventTypeParseError = 0,
/// A ssl error was detected
  FCOErrorAnalyticsEventTypeSslError = 1,
};

/// A transaction ends in four different states:
/// <ul>
///   <li>
///     COMPLETED: Transaction completed successfully
///   </li>
///   <li>
///     DECLINED:  Transaction was declined
///   </li>
///   <li>
///     PENDING:   Transaction was initialized (bank transfer)
///   </li>
///   <li>
///     CANCELLED: The user cancelled the transaction
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, FCOTransactionState, open) {
/// Transaction completed successfully
  FCOTransactionStateCompleted = 0,
/// Transaction was declined
  FCOTransactionStateDeclined = 1,
/// Transaction was initialized (bank transfer)
  FCOTransactionStatePending = 2,
/// Transaction weas uncleared
  FCOTransactionStateUncleared = 3,
/// The user cancelled the transaction
  FCOTransactionStateCancelled = 4,
};

@class FCOUserSession;
@class FCOCoreSettings;

/// This class acts as the entry point for accessing Fastcheckout APIs
/// via common HTTP methods performed on API endpoints.
SWIFT_CLASS_NAMED("FastcheckoutClient")
@interface FCOCoreFastcheckoutClient : NSObject
/// Object that handles user session
@property (nonatomic, readonly, strong) FCOUserSession * _Nonnull userSession;
/// Device information
@property (nonatomic, readonly, strong) FCODeviceInfo * _Nonnull deviceInfo;
/// Initialize a new Fastcheckout
/// \param apiKey Merchant API Key.
///
/// \param settings Checkout settings
///
///
/// returns:
/// A Fastcheckout instance
- (nonnull instancetype)initWithApiKey:(NSString * _Nullable)apiKey settings:(FCOCoreSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FCOReferrerDetails;
@class NSError;

@interface FCOCoreFastcheckoutClient (SWIFT_EXTENSION(FastcheckoutKit))
/// Retrieve the referrer’s details given its identifier
/// \param referrer Referrer identifier
///
/// \param completion Callback with details or error
///
///
/// returns:
/// CancelClosure to be able to cancel the request
- (void (^ _Nullable)(void))referrerDetailsWithReferrer:(NSString * _Nonnull)referrer completion:(void (^ _Nonnull)(FCOReferrerDetails * _Nullable, NSError * _Nullable))completion;
@end


@class NSData;

@interface FCOCoreFastcheckoutClient (SWIFT_EXTENSION(FastcheckoutKit))
/// Set a token that identifies the device to APNs.
/// \param deviceToken A token that identifies the device to APNs.
///
- (void)setPushNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Set a token that identifies the device to APNs.
/// \param deviceToken A token that identifies the device to APNs.
///
/// \param firebaseToken A firebaseToken token that identifies the device
///
- (void)setPushNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken firebaseToken:(NSString * _Nonnull)firebaseToken;
@end


/// This class acts as the entry point for accessing Fastcheckout services
/// like checkout and authentication
SWIFT_CLASS_NAMED("FastcheckoutManager")
@interface FCOFastcheckoutManager : NSObject
/// API client
@property (nonatomic, readonly, strong) FCOCoreFastcheckoutClient * _Nonnull client;
/// Checkout modal presentation style
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// Initialize a new FastcheckoutManager
/// \param client API client.
///
/// \param colors Checkout colors
///
///
/// returns:
/// A FastcheckoutManager instance
- (nonnull instancetype)initWithClient:(FCOCoreFastcheckoutClient * _Nonnull)client colors:(FCOColors * _Nullable)colors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
- (void)setAnalyticsDelegate:(id <FCOAnalyticsDelegate> _Nullable)analyticsDelegate;
@end

@protocol FCOPaymentMethodsDelegate;
@class UIViewController;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Returns tuple with payment methods UI (viewController) or error
/// \param delegate PaymentMethodsDelegate
///
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UIViewController * _Nullable)paymentMethodsUIWithDelegate:(id <FCOPaymentMethodsDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


@class UINavigationController;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Starts Qwindo support module
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UINavigationController * _Nonnull)startSupport SWIFT_WARN_UNUSED_RESULT;
/// Starts order support
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UINavigationController * _Nonnull)startSupportForOrder:(NSString * _Nonnull)order SWIFT_WARN_UNUSED_RESULT;
@end


@class FCOStatus;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Starts a checkout given a transaction identifier.
/// \param transactionID Transaction identifier
///
/// \param host Host view controller
///
/// \param onCompletion Callback to be performed once the checkout completes
///
- (void)startCheckoutWithTransactionId:(NSString * _Nonnull)transactionId host:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nonnull)(FCOStatus * _Nullable, NSError * _Nullable))onCompletion;
/// Starts a checkout given a json that conforms to MSP API
/// https://docs.multisafepay.com/api/#orders
/// \param json JSON data
///
/// \param host Host view controller
///
/// \param onCompletion Callback to be performed once the checkout completes
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))startCheckoutWithJson:(NSDictionary<NSString *, id> * _Nonnull)json host:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nonnull)(FCOStatus * _Nullable, NSError * _Nullable))onCompletion;
/// Verify the checkout identifier
/// \param id Checkout identifier
///
///
/// returns:
/// True if identifier is valid, false otherwise
- (BOOL)validateCheckoutWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
@end

@protocol FCOShippingAddressesDelegate;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Controller responsible to be able to add a shipping address.
/// \param delegate ShippingAddressesDelegate to get notified with module changes
///
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UINavigationController * _Nullable)addAddressUIWithDelegate:(id <FCOShippingAddressesDelegate> _Nullable)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Controller responsible to be able to edit a shipping address.
/// \param delegate ShippingAddressesDelegate to get notified with module changes
///
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UINavigationController * _Nullable)editAddressUIWithId:(NSString * _Nonnull)id delegate:(id <FCOShippingAddressesDelegate> _Nullable)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Controller to manage user details.
///
/// returns:
/// UINavigationController instance to be presented to the user. The presentation
/// is up to the integrator.
- (UIViewController * _Nullable)editUserProfileUIAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


enum FCOSocialProvider : NSInteger;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Present UI to be able to log into Fastcheckout
/// \param host Host view controller
///
/// \param onCompletion Completion block to execute after login finishes
///
- (void)loginWithHost:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nullable)(void))onCompletion;
/// Present UI to be able to log into Fastcheckout
/// \param email User’s email to login/sign up
///
/// \param host Host view controller
///
/// \param completion Completion block to execute after login finishes
///
- (void)loginWithEmail:(NSString * _Nonnull)email host:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nullable)(void))onCompletion;
/// Present UI to be able to log into Fastcheckout
/// \param provider Social provider to login/sign up
///
/// \param accessToken Social provider’s access token
///
/// \param host Host view controller
///
/// \param completion Completion block to execute after login finishes
///
- (void)loginWithProvider:(enum FCOSocialProvider)provider accessToken:(NSString * _Nonnull)accessToken host:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nullable)(void))onCompletion;
/// Force to close user session
- (void)logout;
@end


@class NSURL;

/// This class describe the data that belongs to
/// an invitation from the current user
SWIFT_CLASS_NAMED("Invitation")
@interface FCOInvitation : NSObject <NSCopying>
/// Invitation’s title
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Invitation’s subtitle
@property (nonatomic, readonly, copy) NSString * _Nonnull subtitle;
/// Invitation’s message body
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
/// Invitation’s message subject
@property (nonatomic, readonly, copy) NSString * _Nonnull subject;
/// Invitation’s link
@property (nonatomic, readonly, copy) NSURL * _Nonnull link;
/// Generates a copy of a Invitation object
/// \param zone Zone
///
///
/// returns:
/// Invitation copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FCOSite;

/// This class describe the merchant details of an order
SWIFT_CLASS_NAMED("MerchantDetails")
@interface FCOMerchantDetails : NSObject <NSCopying>
/// Merchant’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Merchant’s site
@property (nonatomic, readonly, strong) FCOSite * _Nonnull site;
/// Merchant’s support email
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// Merchant’s support phone number
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
/// Generates a copy of a MerchantDetails object
/// \param zone Zone
///
///
/// returns:
/// MerchantDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSDate;

/// This class describe the data that belongs to a message
SWIFT_CLASS_NAMED("Message")
@interface FCOMessage : NSObject <NSCopying>
/// Message identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Message creation date
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
/// Message subject
@property (nonatomic, readonly, copy) NSString * _Nonnull subject;
/// Message read date (<em>optional</em>)
@property (nonatomic, readonly, copy) NSDate * _Nullable readAt;
/// Message related transaction identifier (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
/// Generates a copy of a Message object
/// \param zone Zone
///
///
/// returns:
/// Message copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FCOOrder;

/// This class describe the data that belongs to a message’s details
SWIFT_CLASS_NAMED("MessageDetails")
@interface FCOMessageDetails : NSObject <NSCopying>
/// Message identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Message’s parent identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull parentId;
/// Message creation date
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
/// Message subject
@property (nonatomic, readonly, copy) NSString * _Nonnull subject;
/// Message body
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
/// Raw message (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable raw;
/// Message read date (<em>optional</em>)
@property (nonatomic, readonly, copy) NSDate * _Nullable readAt;
/// List of related messages (<em>optional</em>)
@property (nonatomic, readonly, copy) NSArray<FCOMessage *> * _Nullable relatedMessages;
/// Related order (<em>optional)</em>
@property (nonatomic, readonly, strong) FCOOrder * _Nullable relatedOrder;
/// Indicates whether the message can be replyed or not
@property (nonatomic, readonly) BOOL canReply;
/// Generates a copy of a MessageDetails object
/// \param zone Zone
///
///
/// returns:
/// MessageDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// List of messages can be filtered by inbox/outbox
/// <ul>
///   <li>
///     INBOX:  Messages received by the user
///   </li>
///   <li>
///     OUTBOX: Messages sent by the user
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, FCOMessagesFilter, "MessagesFilter", open) {
/// Inbox filter
  FCOMessagesFilterInbox = 0,
/// Outbox filter
  FCOMessagesFilterOutbox = 1,
};





/// This class describe the summarized data of an order
SWIFT_CLASS_NAMED("Order")
@interface FCOOrder : NSObject <NSCopying>
/// Order Identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Order’s date
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Order’s site
@property (nonatomic, readonly, copy) NSString * _Nonnull site;
/// Order’s amount
@property (nonatomic, readonly, copy) NSString * _Nonnull amount;
/// Order’s new transaction identifier <em>(optional)</em>.
@property (nonatomic, readonly, copy) NSString * _Nullable newTransactionId;
/// Generates a copy of a OrderSummary object
/// \param zone Zone
///
///
/// returns:
/// OrderSummary copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FCOOrderStatus;
@class FCOOrderItem;
@class FCOShippingDetails;

/// This class describe the details of an order
SWIFT_CLASS_NAMED("OrderDetails")
@interface FCOOrderDetails : NSObject <NSCopying>
/// FCO’s Order Id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Merchant’s Order id
@property (nonatomic, readonly, copy) NSString * _Nonnull orderId;
/// Order’s date
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Order’s status
@property (nonatomic, readonly, strong) FCOOrderStatus * _Nonnull status;
/// Order’s payment method
@property (nonatomic, readonly, copy) NSString * _Nonnull method;
/// Order’s new transaction identifier <em>(optional)</em>.
@property (nonatomic, readonly, copy) NSString * _Nullable newTransactionId;
/// Order’s Items
@property (nonatomic, readonly, copy) NSArray<FCOOrderItem *> * _Nonnull items;
/// Order’s shipping details (optional)
@property (nonatomic, readonly, strong) FCOShippingDetails * _Nullable shipping;
/// Order’s merchant details
@property (nonatomic, readonly, strong) FCOMerchantDetails * _Nonnull merchant;
/// Vat price
@property (nonatomic, readonly, copy) NSString * _Nonnull vat;
/// Total price
@property (nonatomic, readonly, copy) NSString * _Nonnull total;
/// Cashback price (optional)
@property (nonatomic, readonly, copy) NSString * _Nullable cashback;
/// Generates a copy of a OrderDetails object
/// \param zone Zone
///
///
/// returns:
/// OrderDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class describe the data that belongs to an item
/// of an order
SWIFT_CLASS_NAMED("OrderItem")
@interface FCOOrderItem : NSObject
/// Item’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Item’s comment
@property (nonatomic, readonly, copy) NSString * _Nonnull comment;
/// Item’s price
@property (nonatomic, readonly, copy) NSString * _Nonnull price;
/// Item’s quantity
@property (nonatomic, readonly, copy) NSString * _Nonnull quantity;
/// Item’s image URL (*optional)
@property (nonatomic, readonly, copy) NSURL * _Nullable image;
/// Item’s product URL (*optional)
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum FCOShippingStatus : NSInteger;

SWIFT_CLASS_NAMED("OrderStatus")
@interface FCOOrderStatus : NSObject <NSCopying>
@property (nonatomic, readonly) enum FCOConsumerStatus type;
@property (nonatomic, readonly) enum FCOShippingStatus shipping;
- (nonnull instancetype)initWithType:(enum FCOConsumerStatus)type shipping:(enum FCOShippingStatus)shipping OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class describe the summarized data of an order
SWIFT_CLASS_NAMED("OrderSummary")
@interface FCOOrderSummary : NSObject <NSCopying>
/// Order Identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Order’s date
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Order’s site
@property (nonatomic, readonly, copy) NSString * _Nonnull site;
/// Order’s amount
@property (nonatomic, readonly, copy) NSString * _Nonnull amount;
/// Order’s new transaction identifier <em>(optional)</em>.
@property (nonatomic, readonly, copy) NSString * _Nullable newTransactionId;
/// Order’s status
@property (nonatomic, readonly, strong) FCOOrderStatus * _Nonnull status;
/// Generates a copy of a OrderSummary object
/// \param zone Zone
///
///
/// returns:
/// OrderSummary copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("PayAfterDeliveryType")
@interface FCOPayAfterDeliveryType : FCOCardType
@property (nonatomic, readonly, copy) NSString * _Nonnull birthdate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FCOPaymentMethodCardStyle;

SWIFT_CLASS_NAMED("PaymentMethod")
@interface FCOPaymentMethod : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull holder;
@property (nonatomic, readonly, strong) FCOCardType * _Nonnull type;
@property (nonatomic, readonly, strong) FCOPaymentMethodCardStyle * _Nonnull style;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("PaymentMethodCardStyle")
@interface FCOPaymentMethodCardStyle : NSObject
/// Card’s image
@property (nonatomic, readonly, copy) NSURL * _Nullable image;
/// Card’s background color
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// Card’s text color
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Implement this protocol to get notified with payment methods UI changes
SWIFT_PROTOCOL_NAMED("PaymentMethodsDelegate")
@protocol FCOPaymentMethodsDelegate
/// This delegate describes if the user tapped go to shopping when he doesn’t have any payment method stored
- (void)fastcheckoutDidRequestGoShopping;
@end


/// This class describe the data that belongs to a referrer
SWIFT_CLASS_NAMED("ReferrerDetails")
@interface FCOReferrerDetails : NSObject <NSCopying>
/// User’s id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// User’s email
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Generates a copy of a ReferrerDetails object
/// \param zone Zone
///
///
/// returns:
/// ReferrerDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class describe the settings of the SDK
SWIFT_CLASS_NAMED("Settings")
@interface FCOCoreSettings : NSObject <NSCopying>
/// A Boolean value that determines whether it’s enabled the usage of TouchID™/FaceID™
/// if the user’s device has support for it
/// The default value of this property is <em><em>true</em></em>.
@property (nonatomic) BOOL biometricAuthenticationEnabled;
/// A Boolean value that specify if logs are shown or not
/// The default value of this property is <em><em>false</em></em>
@property (nonatomic) BOOL debug;
/// Determines whether the user session is persisted across app launches.
/// Default is <em><em>true</em></em>.
@property (nonatomic) BOOL persistUserSession;
/// Determines whether the cart is shown before starting the checkout.
/// If you skip this step, the user is redirected to the checkout’s shipping or payment step automatically
/// Default is <em><em>false</em></em>
@property (nonatomic) BOOL skipShowCartAtBeginning;
/// Determines whether the SSL pinning is enabled or not.
/// Default is <em><em>false</em></em>
@property (nonatomic) BOOL pinning;
/// A key that describes the Fastcheckout environment (test/live)
/// Valid values are: <em>FastcheckoutLiveEnvironment</em> or <em>FastcheckoutTestEnvironment</em>
@property (nonatomic, copy) NSString * _Nonnull environmentKey;
/// A key that describes the if the merchant is going Fastcheckout or Connect API
/// Default is <em><em>true</em></em>
@property (nonatomic) BOOL anonymous;
/// Specify the app name that will be shown in the navigation bar
@property (nonatomic, copy) NSString * _Nullable appName;
/// Deep link to continue transaction finished in another app (via banking apps)
/// If you do not set <code>deepLinkScheme</code>, FCO SDK will not allow to open banking apps
/// to complete payment
@property (nonatomic, copy) NSString * _Nullable deepLinkScheme;
@property (nonatomic) BOOL inAppBrowser;
/// Initialize a new Settings
/// \param environment SDK environment key
///
///
/// returns:
/// Instance of Settings
- (nonnull instancetype)initWithEnvironment:(NSString * _Nonnull)environment OBJC_DESIGNATED_INITIALIZER;
/// Initialize a new Settings
/// \param environment SDK environment key
///
/// \param debug Boolean that indicates whether logs are enabled or not
///
/// \param biometricAuthenticationEnabled Boolean that indicates whether it’s enabled TouchID™/FaceID™
///
///
/// returns:
/// Instance of Settings
- (nonnull instancetype)initWithEnvironment:(NSString * _Nonnull)environment debug:(BOOL)debug biometricAuthenticationEnabled:(BOOL)biometricAuthenticationEnabled persistUserSession:(BOOL)persistUserSession skipShowCartAtBeginning:(BOOL)skipShowCartAtBeginning pinning:(BOOL)pinning anonymous:(BOOL)anonymous OBJC_DESIGNATED_INITIALIZER;
/// Creates a new Settings object with default values
///
/// returns:
/// Instance of Settings
+ (FCOCoreSettings * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
/// Generate a copy of Settings object
/// \param zone Zone
///
///
/// returns:
/// Settings copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class describe the data that belongs to
/// a shipping address
SWIFT_CLASS_NAMED("ShippingAddress")
@interface FCOShippingAddress : NSObject <NSCopying>
/// Shipping address Identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// First name
@property (nonatomic, readonly, copy) NSString * _Nonnull firstName;
/// Last name
@property (nonatomic, readonly, copy) NSString * _Nonnull lastName;
/// Address 1
@property (nonatomic, readonly, copy) NSString * _Nonnull address1;
/// Address 2 <em>(optional)</em>
@property (nonatomic, readonly, copy) NSString * _Nullable address2;
/// Address 3 <em>(optional)</em>
@property (nonatomic, readonly, copy) NSString * _Nullable address3;
/// House number
@property (nonatomic, readonly, copy) NSString * _Nonnull number;
/// Zip code
@property (nonatomic, readonly, copy) NSString * _Nonnull zip;
/// City
@property (nonatomic, readonly, copy) NSString * _Nonnull city;
/// Country
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
/// Country Code (ISO 4217)
@property (nonatomic, readonly, copy) NSString * _Nonnull countryCode;
/// Shipping address image url
@property (nonatomic, readonly, copy) NSURL * _Nullable image;
/// Address alias
@property (nonatomic, readonly, copy) NSString * _Nullable alias;
/// Is default Address
@property (nonatomic, readonly) BOOL isDefault;
/// Generates a copy of a ShippingAddress object
/// \param zone Zone
///
///
/// returns:
/// ShippingAddress copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Implement this protocol to get notified with shipping addresses module changes
SWIFT_PROTOCOL_NAMED("ShippingAddressesDelegate")
@protocol FCOShippingAddressesDelegate
/// This delegate describes if the user added a new shipping address
- (void)fastcheckoutDidAddAddress;
/// This delegate describes if the user updated a new shipping address
- (void)fastcheckoutDidUpdateAddress;
@end


/// This class describe the shipping details of an order
SWIFT_CLASS_NAMED("ShippingDetails")
@interface FCOShippingDetails : NSObject <NSCopying>
/// Shipping address
@property (nonatomic, readonly, copy) NSString * _Nonnull address;
/// Carrier (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable carrier;
/// Shipping date (<em>optional</em>)
@property (nonatomic, readonly, copy) NSDate * _Nullable date;
/// Track and trace code (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable trackingId;
/// Shipping comment (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable comment;
/// Generates a copy of a ShippingDetails object
/// \param zone Zone
///
///
/// returns:
/// ShippingDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, FCOShippingStatus, "ShippingStatus", open) {
  FCOShippingStatusEmpty = 0,
  FCOShippingStatusShipped = 1,
  FCOShippingStatusDelivered = 2,
  FCOShippingStatusUndefined = 3,
};


/// This class describe the data that belongs to a merchant’s site
SWIFT_CLASS_NAMED("Site")
@interface FCOSite : NSObject <NSCopying>
/// Site’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Site’s url
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// Generates a copy of a Site object
/// \param zone Zone
///
///
/// returns:
/// Site copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Social Providers supported to sign up/login
/// <ul>
///   <li>
///     GOOGLE
///   </li>
///   <li>
///     FACEBOOK
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, FCOSocialProvider, "SocialProvider", open) {
/// Google
  FCOSocialProviderGoogle = 0,
/// Facebook
  FCOSocialProviderFacebook = 1,
};


/// This class describe the status of a finished transaction.
/// When a transaction ends, it returns a status detailing what happened.
SWIFT_CLASS_NAMED("Status")
@interface FCOStatus : NSObject <NSCopying>
/// Boolean value that indicates if the transaction has ended successfully or not <em>(read-only)</em>
@property (nonatomic, readonly) BOOL success;
/// Fastcheckout transaction state description <em>(read-only)</em>
@property (nonatomic, readonly) enum FCOTransactionState state;
/// Localized description of the state <em>(read-only)</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Transaction Id
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionId;
/// Generates a copy of a Status object
/// \param zone Zone
///
///
/// returns:
/// Status copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end































/// This class describe the data that belongs to
/// the current active user
SWIFT_CLASS_NAMED("UserInfo")
@interface FCOUserInfo : NSObject <NSCopying>
/// User’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// User’s email
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// User’s id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// User’s last login (<em>optional</em>)
@property (nonatomic, readonly, copy) NSDate * _Nullable lastLogin;
/// User’s referral (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable referral;
/// User’s cashback (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable cashback;
/// Generates a copy of a UserInfo object
/// \param zone Zone
///
///
/// returns:
/// UserInfo copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol FCOUserSessionDelegate;
@class FCOWish;

/// This class acts as the handler of the changes done in the user
/// session. This class also exposes methods that can be performed on
/// behalf of the active user.
SWIFT_CLASS_NAMED("UserSession")
@interface FCOUserSession : NSObject
/// Delegate for receiving user session messages
@property (nonatomic, weak) id <FCOUserSessionDelegate> _Nullable delegate;
/// Check if the user is logged in
@property (nonatomic, readonly) BOOL isUserLoggedIn;
/// Start a request to the user’s balance. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the balance.
/// \param completion Tuple with a balance or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))balanceWithCompletion:(void (^ _Nonnull)(FCOBalance * _Nullable, NSError * _Nullable))completion;
/// Start a request to get the user’s list of orders. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned a list of orders
/// \param completion Tuple with a orders or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))ordersFrom:(NSInteger)start count:(NSInteger)count completion:(void (^ _Nonnull)(NSArray<FCOOrderSummary *> * _Nullable, NSError * _Nullable))completion;
/// Start a request to get the details of an order. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the balance.
/// \param completion Tuple with a details or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))orderDetailsWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(FCOOrderDetails * _Nullable, NSError * _Nullable))completion;
/// Start a request to get the user’s list of shipping addresses. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the list of shipping addresses.
/// \param completion Tuple with a list of addresses or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))shippingAddressesWithCompletion:(void (^ _Nonnull)(NSArray<FCOShippingAddress *> * _Nullable, NSError * _Nullable))completion;
/// Start a request to remove a shipping address. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the list of shipping addresses.
/// \param completion Tuple with a list of addresses or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))deleteShippingAddressWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSArray<FCOShippingAddress *> * _Nullable, NSError * _Nullable))completion;
/// Retrieve the data of the current active user. If there is no active user, returns nil.
///
/// returns:
/// UserInfo? instance.
- (FCOUserInfo * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Start a request to get an invitation. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the invitation.
/// \param completion Tuple with an invitation or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))invitationWithCompletion:(void (^ _Nonnull)(FCOInvitation * _Nullable, NSError * _Nullable))completion;
/// Request BiometricAuthentication status for current user in Fastcheckout
///
/// returns:
/// BiometricAuthentication status
- (enum FCOBiometricAuthenticationStatus)biometricAuthenticationStatus SWIFT_WARN_UNUSED_RESULT;
/// Set BiometricAuthentication usage in Fastcheckout
/// \param enabled Enable or disable BiometricAuthentication usage in Fastcheckout
///
///
/// returns:
/// Updated BiometricAuthentication status
- (enum FCOBiometricAuthenticationStatus)setBiometricAuthenticationWithEnabled:(BOOL)enabled SWIFT_WARN_UNUSED_RESULT;
- (void (^ _Nullable)(void))wishlistWithCompletion:(void (^ _Nonnull)(NSArray<FCOWish *> * _Nullable, NSError * _Nullable))completion;
- (void (^ _Nullable)(void))setWishlist:(NSArray<FCOWish *> * _Nonnull)wishlist completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Start a request to get the user’s list of messages. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the list of messages.
/// \param from Pagination starts from this position
///
/// \param count Pagination size
///
/// \param filter Filter applied to pagination (inbox/outbox)
///
/// \param completion Tuple with a list of messages or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))messagesFrom:(NSInteger)start count:(NSInteger)count filterBy:(enum FCOMessagesFilter)filter completion:(void (^ _Nonnull)(NSArray<FCOMessage *> * _Nullable, NSError * _Nullable))completion;
/// Start a request to get the details of a message. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned its data.
/// \param id Message identifier
///
/// \param completion Tuple with details or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))messageDetailsWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(FCOMessageDetails * _Nullable, NSError * _Nullable))completion;
/// Start a request to get unread messages counter. If something goes wrong during the request, an error is returned.
/// \param filterBy Unreads message counter (inbox/outbox)
///
/// \param completion Tuple with counter or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))unreadMessagesWithFilterBy:(enum FCOMessagesFilter)filter completion:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completion;
/// Start a request to mark as read/unread a message. If something goes wrong during the request, an error is returned.
/// \param id Message identifier
///
/// \param read Indicates whether the message should be read or unread
///
/// \param completion Tuple with success or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))markAsReadWithId:(NSString * _Nonnull)id read:(BOOL)read completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Start a request to delete a message. If something goes wrong during the request, an error is returned.
/// \param id Message identifier
///
/// \param completion Tuple with success or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))deleteMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Start a request to reply to a message. If something goes wrong during the request, an error is returned.
/// \param parentId Message’s parent identifier
///
/// \param content Reply body
///
/// \param completion Tuple with success or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))replyMessageWithParentId:(NSString * _Nonnull)id content:(NSString * _Nonnull)content completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Start a request to get the user’s preferred payment methods. If something goes wrong during the request, an error is returned.
/// Otherwise, the list of payment methods is returned.
/// \param completion Tuple with payment methods or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))paymentMethodsWithCompletion:(void (^ _Nonnull)(NSArray<FCOPaymentMethod *> * _Nullable, NSError * _Nullable))completion;
/// Start a request to delete a preferred payment methods. If something goes wrong during the request, an error is returned.
/// Otherwise, the new list of payment methods is returned.
/// \param completion Tuple with payment methods or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))deletePaymentMethodWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSArray<FCOPaymentMethod *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Implement this protocol to get notified with latest changes in user session
SWIFT_PROTOCOL_NAMED("UserSessionDelegate")
@protocol FCOUserSessionDelegate
/// This delegate describes if there has been a change in the user session
/// \param userSession Instance of UserSession
///
/// \param isUserLoggedIn Boolean
///
- (void)userSession:(FCOUserSession * _Nonnull)userSession didChangeLoginStatus:(BOOL)isUserLoggedIn;
@end


SWIFT_CLASS_NAMED("Wish")
@interface FCOWish : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
@property (nonatomic, readonly, copy) NSString * _Nonnull siteId;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id siteId:(NSString * _Nonnull)siteId appId:(NSString * _Nonnull)appId name:(NSString * _Nonnull)name desc:(NSString * _Nullable)desc url:(NSURL * _Nonnull)url imageURL:(NSURL * _Nullable)imageURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef FASTCHECKOUTKIT_SWIFT_H
#define FASTCHECKOUTKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FastcheckoutKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class FCOAnalyticsEvent;
@class FCOErrorAnalyticsEvent;

/// Implement this protocol to get notified with analytics events
SWIFT_PROTOCOL_NAMED("AnalyticsDelegate")
@protocol FCOAnalyticsDelegate
/// This delegate describes if it was fired an analytics event
/// \param event Analytics event
///
- (void)fastcheckoutDidTrackAnalyticsEvent:(FCOAnalyticsEvent * _Nonnull)event;
/// This delegate describes if it was fired an error analytics event
/// \param event Analytics error event
///
- (void)fastcheckoutDidTrackErrorAnalyticsEvent:(FCOErrorAnalyticsEvent * _Nonnull)event;
@end

enum FCOAnalyticsEventType : NSInteger;
@class NSString;

/// This class describe the type, name and parameters of a valid analytics event
SWIFT_CLASS_NAMED("AnalyticsEvent")
@interface FCOAnalyticsEvent : NSObject <NSCopying>
/// Event’s type
@property (nonatomic, readonly) enum FCOAnalyticsEventType type;
/// Event’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Event’s parameters
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable parameters;
- (nonnull instancetype)initWithType:(enum FCOAnalyticsEventType)type name:(NSString * _Nonnull)name parameters:(NSDictionary<NSString *, id> * _Nullable)parameters OBJC_DESIGNATED_INITIALIZER;
/// Generates a copy of a AnalyticsEvent object
/// \param zone Zone
///
///
/// returns:
/// AnalyticsEvent copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// List of valid analytics events
typedef SWIFT_ENUM_NAMED(NSInteger, FCOAnalyticsEventType, "AnalyticsEventType", open) {
/// Cart was shown
  FCOAnalyticsEventTypeShowCart = 0,
/// An address was added
  FCOAnalyticsEventTypeAddAddress = 1,
/// An address was deleted
  FCOAnalyticsEventTypeDeleteAddress = 2,
/// Delivery step was reached
  FCOAnalyticsEventTypeStartDelivery = 3,
/// Delivery step completed successfully
  FCOAnalyticsEventTypeCompleteDelivery = 4,
/// Payment step was reached
  FCOAnalyticsEventTypeStartPayment = 5,
/// Payment step was completed successfully
  FCOAnalyticsEventTypeCompletePayment = 6,
/// Payment selected failed
  FCOAnalyticsEventTypeFailedPayment = 7,
/// A giftcard was added
  FCOAnalyticsEventTypeAddGiftcard = 8,
/// A screen was visited
  FCOAnalyticsEventTypeScreenVisited = 9,
};

@class NSNumber;

/// This class describe the data that belongs to
/// a balance
SWIFT_CLASS_NAMED("Balance")
@interface FCOBalance : NSObject <NSCopying>
/// Amount in balance
@property (nonatomic, readonly, copy) NSString * _Nonnull amount;
/// Amount value
@property (nonatomic, readonly) double value;
/// Generates a copy of a Balance object
/// \param zone Zone
///
///
/// returns:
/// Balance copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// BiometricAuthentication could be in three different states:
/// <ul>
///   <li>
///     UNKNOWN:  BiometricAuthentication is not available (device does not support it/user has not being prompted about BiometricAuthentication)
///   </li>
///   <li>
///     ENABLED:  BiometricAuthentication is enabled
///   </li>
///   <li>
///     DISABLED: BiometricAuthentication is disabled
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, FCOBiometricAuthenticationStatus, "BiometricAuthenticationStatus", open) {
/// FaceID/TouchID is not available (device does not support it/user has not being prompted about FaceID/TouchID)
  FCOBiometricAuthenticationStatusUnknown = 0,
/// FaceID/TouchID is enabled
  FCOBiometricAuthenticationStatusEnabled = 1,
/// FaceID/TouchID is disabled
  FCOBiometricAuthenticationStatusDisabled = 2,
};


SWIFT_CLASS_NAMED("CardType")
@interface FCOCardType : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

/// This class describe the colors to be used in the SDK
SWIFT_CLASS_NAMED("Colors")
@interface FCOColors : NSObject <NSCopying>
/// Main color
@property (nonatomic, readonly, strong) UIColor * _Nonnull primaryColor;
/// Secondary color (background of cells)
@property (nonatomic, readonly, strong) UIColor * _Nonnull secondaryColor;
/// Main text color
@property (nonatomic, readonly, strong) UIColor * _Nonnull primaryTextColor;
/// Color used to show details that are not in focus
@property (nonatomic, readonly, strong) UIColor * _Nonnull secondaryTextColor;
/// Controller’s background color
@property (nonatomic, readonly, strong) UIColor * _Nonnull backgroundColor;
/// Initialize a new Colors instance
/// \param primaryColor Main color
///
/// \param secondaryColor Secondary color
///
/// \param primaryTextColor Main text color
///
/// \param secondaryTextColor Secondary text color
///
/// \param backgroundColor Background color
///
///
/// returns:
/// Colors instance
- (nonnull instancetype)initWithPrimaryColor:(UIColor * _Nonnull)primaryColor secondaryColor:(UIColor * _Nonnull)secondaryColor primaryTextColor:(UIColor * _Nonnull)primaryTextColor secondaryTextColor:(UIColor * _Nonnull)secondaryTextColor backgroundColor:(UIColor * _Nonnull)backgroundColor OBJC_DESIGNATED_INITIALIZER;
/// Generates a copy of a Colors object
/// \param zone Zone
///
///
/// returns:
/// Colors copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, FCOConsumerStatus, "ConsumerStatus", open) {
  FCOConsumerStatusOpen = 0,
  FCOConsumerStatusPaid = 1,
  FCOConsumerStatusDeclined = 2,
  FCOConsumerStatusPending = 3,
  FCOConsumerStatusNeedpayment = 4,
  FCOConsumerStatusUndefined = 5,
};


SWIFT_CLASS_NAMED("CreditcardType")
@interface FCOCreditcardType : FCOCardType
@property (nonatomic, readonly, copy) NSString * _Nonnull number;
@property (nonatomic, readonly, copy) NSString * _Nonnull expiryDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("DebitcardType")
@interface FCODebitcardType : FCOCardType
@property (nonatomic, readonly, copy) NSString * _Nonnull iban;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class describe the data that belongs to
/// the current device
SWIFT_CLASS_NAMED("DeviceInfo")
@interface FCODeviceInfo : NSObject <NSCopying>
/// Device’s token
@property (nonatomic, readonly, copy) NSString * _Nonnull token;
/// Device’s OS
@property (nonatomic, readonly, copy) NSString * _Nonnull os;
/// Generates a copy of a DeviceInfo object
/// \param zone Zone
///
///
/// returns:
/// DeviceInfo copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum FCOErrorAnalyticsEventType : NSInteger;

/// This class describe the type and reason of an error analytics event
SWIFT_CLASS_NAMED("ErrorAnalyticsEvent")
@interface FCOErrorAnalyticsEvent : NSObject <NSCopying>
@property (nonatomic, readonly) enum FCOErrorAnalyticsEventType type;
/// Error reason
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
- (nonnull instancetype)initWithType:(enum FCOErrorAnalyticsEventType)type reason:(NSString * _Nonnull)reason OBJC_DESIGNATED_INITIALIZER;
/// Generates a copy of a ErrorAnalyticsEvent object
/// \param zone Zone
///
///
/// returns:
/// ErrorAnalyticsEvent copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// List of different detected errors
typedef SWIFT_ENUM_NAMED(NSInteger, FCOErrorAnalyticsEventType, "ErrorAnalyticsEventType", open) {
/// A parsing error was detected
  FCOErrorAnalyticsEventTypeParseError = 0,
/// A ssl error was detected
  FCOErrorAnalyticsEventTypeSslError = 1,
};

/// A transaction ends in four different states:
/// <ul>
///   <li>
///     COMPLETED: Transaction completed successfully
///   </li>
///   <li>
///     DECLINED:  Transaction was declined
///   </li>
///   <li>
///     PENDING:   Transaction was initialized (bank transfer)
///   </li>
///   <li>
///     CANCELLED: The user cancelled the transaction
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, FCOTransactionState, open) {
/// Transaction completed successfully
  FCOTransactionStateCompleted = 0,
/// Transaction was declined
  FCOTransactionStateDeclined = 1,
/// Transaction was initialized (bank transfer)
  FCOTransactionStatePending = 2,
/// Transaction weas uncleared
  FCOTransactionStateUncleared = 3,
/// The user cancelled the transaction
  FCOTransactionStateCancelled = 4,
};

@class FCOUserSession;
@class FCOCoreSettings;

/// This class acts as the entry point for accessing Fastcheckout APIs
/// via common HTTP methods performed on API endpoints.
SWIFT_CLASS_NAMED("FastcheckoutClient")
@interface FCOCoreFastcheckoutClient : NSObject
/// Object that handles user session
@property (nonatomic, readonly, strong) FCOUserSession * _Nonnull userSession;
/// Device information
@property (nonatomic, readonly, strong) FCODeviceInfo * _Nonnull deviceInfo;
/// Initialize a new Fastcheckout
/// \param apiKey Merchant API Key.
///
/// \param settings Checkout settings
///
///
/// returns:
/// A Fastcheckout instance
- (nonnull instancetype)initWithApiKey:(NSString * _Nullable)apiKey settings:(FCOCoreSettings * _Nullable)settings OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FCOReferrerDetails;
@class NSError;

@interface FCOCoreFastcheckoutClient (SWIFT_EXTENSION(FastcheckoutKit))
/// Retrieve the referrer’s details given its identifier
/// \param referrer Referrer identifier
///
/// \param completion Callback with details or error
///
///
/// returns:
/// CancelClosure to be able to cancel the request
- (void (^ _Nullable)(void))referrerDetailsWithReferrer:(NSString * _Nonnull)referrer completion:(void (^ _Nonnull)(FCOReferrerDetails * _Nullable, NSError * _Nullable))completion;
@end


@class NSData;

@interface FCOCoreFastcheckoutClient (SWIFT_EXTENSION(FastcheckoutKit))
/// Set a token that identifies the device to APNs.
/// \param deviceToken A token that identifies the device to APNs.
///
- (void)setPushNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Set a token that identifies the device to APNs.
/// \param deviceToken A token that identifies the device to APNs.
///
/// \param firebaseToken A firebaseToken token that identifies the device
///
- (void)setPushNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken firebaseToken:(NSString * _Nonnull)firebaseToken;
@end


/// This class acts as the entry point for accessing Fastcheckout services
/// like checkout and authentication
SWIFT_CLASS_NAMED("FastcheckoutManager")
@interface FCOFastcheckoutManager : NSObject
/// API client
@property (nonatomic, readonly, strong) FCOCoreFastcheckoutClient * _Nonnull client;
/// Checkout modal presentation style
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
/// Initialize a new FastcheckoutManager
/// \param client API client.
///
/// \param colors Checkout colors
///
///
/// returns:
/// A FastcheckoutManager instance
- (nonnull instancetype)initWithClient:(FCOCoreFastcheckoutClient * _Nonnull)client colors:(FCOColors * _Nullable)colors OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
- (void)setAnalyticsDelegate:(id <FCOAnalyticsDelegate> _Nullable)analyticsDelegate;
@end

@protocol FCOPaymentMethodsDelegate;
@class UIViewController;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Returns tuple with payment methods UI (viewController) or error
/// \param delegate PaymentMethodsDelegate
///
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UIViewController * _Nullable)paymentMethodsUIWithDelegate:(id <FCOPaymentMethodsDelegate> _Nonnull)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


@class UINavigationController;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Starts Qwindo support module
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UINavigationController * _Nonnull)startSupport SWIFT_WARN_UNUSED_RESULT;
/// Starts order support
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UINavigationController * _Nonnull)startSupportForOrder:(NSString * _Nonnull)order SWIFT_WARN_UNUSED_RESULT;
@end


@class FCOStatus;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Starts a checkout given a transaction identifier.
/// \param transactionID Transaction identifier
///
/// \param host Host view controller
///
/// \param onCompletion Callback to be performed once the checkout completes
///
- (void)startCheckoutWithTransactionId:(NSString * _Nonnull)transactionId host:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nonnull)(FCOStatus * _Nullable, NSError * _Nullable))onCompletion;
/// Starts a checkout given a json that conforms to MSP API
/// https://docs.multisafepay.com/api/#orders
/// \param json JSON data
///
/// \param host Host view controller
///
/// \param onCompletion Callback to be performed once the checkout completes
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))startCheckoutWithJson:(NSDictionary<NSString *, id> * _Nonnull)json host:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nonnull)(FCOStatus * _Nullable, NSError * _Nullable))onCompletion;
/// Verify the checkout identifier
/// \param id Checkout identifier
///
///
/// returns:
/// True if identifier is valid, false otherwise
- (BOOL)validateCheckoutWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
@end

@protocol FCOShippingAddressesDelegate;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Controller responsible to be able to add a shipping address.
/// \param delegate ShippingAddressesDelegate to get notified with module changes
///
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UINavigationController * _Nullable)addAddressUIWithDelegate:(id <FCOShippingAddressesDelegate> _Nullable)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Controller responsible to be able to edit a shipping address.
/// \param delegate ShippingAddressesDelegate to get notified with module changes
///
///
/// returns:
/// UINavigationController instance to be presented to the user.
/// The presentation is up to the integrator.
- (UINavigationController * _Nullable)editAddressUIWithId:(NSString * _Nonnull)id delegate:(id <FCOShippingAddressesDelegate> _Nullable)delegate error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Controller to manage user details.
///
/// returns:
/// UINavigationController instance to be presented to the user. The presentation
/// is up to the integrator.
- (UIViewController * _Nullable)editUserProfileUIAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


enum FCOSocialProvider : NSInteger;

@interface FCOFastcheckoutManager (SWIFT_EXTENSION(FastcheckoutKit))
/// Present UI to be able to log into Fastcheckout
/// \param host Host view controller
///
/// \param onCompletion Completion block to execute after login finishes
///
- (void)loginWithHost:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nullable)(void))onCompletion;
/// Present UI to be able to log into Fastcheckout
/// \param email User’s email to login/sign up
///
/// \param host Host view controller
///
/// \param completion Completion block to execute after login finishes
///
- (void)loginWithEmail:(NSString * _Nonnull)email host:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nullable)(void))onCompletion;
/// Present UI to be able to log into Fastcheckout
/// \param provider Social provider to login/sign up
///
/// \param accessToken Social provider’s access token
///
/// \param host Host view controller
///
/// \param completion Completion block to execute after login finishes
///
- (void)loginWithProvider:(enum FCOSocialProvider)provider accessToken:(NSString * _Nonnull)accessToken host:(UIViewController * _Nonnull)hostViewController onCompletion:(void (^ _Nullable)(void))onCompletion;
/// Force to close user session
- (void)logout;
@end


@class NSURL;

/// This class describe the data that belongs to
/// an invitation from the current user
SWIFT_CLASS_NAMED("Invitation")
@interface FCOInvitation : NSObject <NSCopying>
/// Invitation’s title
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Invitation’s subtitle
@property (nonatomic, readonly, copy) NSString * _Nonnull subtitle;
/// Invitation’s message body
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
/// Invitation’s message subject
@property (nonatomic, readonly, copy) NSString * _Nonnull subject;
/// Invitation’s link
@property (nonatomic, readonly, copy) NSURL * _Nonnull link;
/// Generates a copy of a Invitation object
/// \param zone Zone
///
///
/// returns:
/// Invitation copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FCOSite;

/// This class describe the merchant details of an order
SWIFT_CLASS_NAMED("MerchantDetails")
@interface FCOMerchantDetails : NSObject <NSCopying>
/// Merchant’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Merchant’s site
@property (nonatomic, readonly, strong) FCOSite * _Nonnull site;
/// Merchant’s support email
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// Merchant’s support phone number
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
/// Generates a copy of a MerchantDetails object
/// \param zone Zone
///
///
/// returns:
/// MerchantDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSDate;

/// This class describe the data that belongs to a message
SWIFT_CLASS_NAMED("Message")
@interface FCOMessage : NSObject <NSCopying>
/// Message identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Message creation date
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
/// Message subject
@property (nonatomic, readonly, copy) NSString * _Nonnull subject;
/// Message read date (<em>optional</em>)
@property (nonatomic, readonly, copy) NSDate * _Nullable readAt;
/// Message related transaction identifier (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
/// Generates a copy of a Message object
/// \param zone Zone
///
///
/// returns:
/// Message copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FCOOrder;

/// This class describe the data that belongs to a message’s details
SWIFT_CLASS_NAMED("MessageDetails")
@interface FCOMessageDetails : NSObject <NSCopying>
/// Message identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Message’s parent identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull parentId;
/// Message creation date
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
/// Message subject
@property (nonatomic, readonly, copy) NSString * _Nonnull subject;
/// Message body
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
/// Raw message (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable raw;
/// Message read date (<em>optional</em>)
@property (nonatomic, readonly, copy) NSDate * _Nullable readAt;
/// List of related messages (<em>optional</em>)
@property (nonatomic, readonly, copy) NSArray<FCOMessage *> * _Nullable relatedMessages;
/// Related order (<em>optional)</em>
@property (nonatomic, readonly, strong) FCOOrder * _Nullable relatedOrder;
/// Indicates whether the message can be replyed or not
@property (nonatomic, readonly) BOOL canReply;
/// Generates a copy of a MessageDetails object
/// \param zone Zone
///
///
/// returns:
/// MessageDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// List of messages can be filtered by inbox/outbox
/// <ul>
///   <li>
///     INBOX:  Messages received by the user
///   </li>
///   <li>
///     OUTBOX: Messages sent by the user
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, FCOMessagesFilter, "MessagesFilter", open) {
/// Inbox filter
  FCOMessagesFilterInbox = 0,
/// Outbox filter
  FCOMessagesFilterOutbox = 1,
};





/// This class describe the summarized data of an order
SWIFT_CLASS_NAMED("Order")
@interface FCOOrder : NSObject <NSCopying>
/// Order Identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Order’s date
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Order’s site
@property (nonatomic, readonly, copy) NSString * _Nonnull site;
/// Order’s amount
@property (nonatomic, readonly, copy) NSString * _Nonnull amount;
/// Order’s new transaction identifier <em>(optional)</em>.
@property (nonatomic, readonly, copy) NSString * _Nullable newTransactionId;
/// Generates a copy of a OrderSummary object
/// \param zone Zone
///
///
/// returns:
/// OrderSummary copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FCOOrderStatus;
@class FCOOrderItem;
@class FCOShippingDetails;

/// This class describe the details of an order
SWIFT_CLASS_NAMED("OrderDetails")
@interface FCOOrderDetails : NSObject <NSCopying>
/// FCO’s Order Id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Merchant’s Order id
@property (nonatomic, readonly, copy) NSString * _Nonnull orderId;
/// Order’s date
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Order’s status
@property (nonatomic, readonly, strong) FCOOrderStatus * _Nonnull status;
/// Order’s payment method
@property (nonatomic, readonly, copy) NSString * _Nonnull method;
/// Order’s new transaction identifier <em>(optional)</em>.
@property (nonatomic, readonly, copy) NSString * _Nullable newTransactionId;
/// Order’s Items
@property (nonatomic, readonly, copy) NSArray<FCOOrderItem *> * _Nonnull items;
/// Order’s shipping details (optional)
@property (nonatomic, readonly, strong) FCOShippingDetails * _Nullable shipping;
/// Order’s merchant details
@property (nonatomic, readonly, strong) FCOMerchantDetails * _Nonnull merchant;
/// Vat price
@property (nonatomic, readonly, copy) NSString * _Nonnull vat;
/// Total price
@property (nonatomic, readonly, copy) NSString * _Nonnull total;
/// Cashback price (optional)
@property (nonatomic, readonly, copy) NSString * _Nullable cashback;
/// Generates a copy of a OrderDetails object
/// \param zone Zone
///
///
/// returns:
/// OrderDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class describe the data that belongs to an item
/// of an order
SWIFT_CLASS_NAMED("OrderItem")
@interface FCOOrderItem : NSObject
/// Item’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Item’s comment
@property (nonatomic, readonly, copy) NSString * _Nonnull comment;
/// Item’s price
@property (nonatomic, readonly, copy) NSString * _Nonnull price;
/// Item’s quantity
@property (nonatomic, readonly, copy) NSString * _Nonnull quantity;
/// Item’s image URL (*optional)
@property (nonatomic, readonly, copy) NSURL * _Nullable image;
/// Item’s product URL (*optional)
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum FCOShippingStatus : NSInteger;

SWIFT_CLASS_NAMED("OrderStatus")
@interface FCOOrderStatus : NSObject <NSCopying>
@property (nonatomic, readonly) enum FCOConsumerStatus type;
@property (nonatomic, readonly) enum FCOShippingStatus shipping;
- (nonnull instancetype)initWithType:(enum FCOConsumerStatus)type shipping:(enum FCOShippingStatus)shipping OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class describe the summarized data of an order
SWIFT_CLASS_NAMED("OrderSummary")
@interface FCOOrderSummary : NSObject <NSCopying>
/// Order Identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Order’s date
@property (nonatomic, readonly, copy) NSDate * _Nonnull date;
/// Order’s site
@property (nonatomic, readonly, copy) NSString * _Nonnull site;
/// Order’s amount
@property (nonatomic, readonly, copy) NSString * _Nonnull amount;
/// Order’s new transaction identifier <em>(optional)</em>.
@property (nonatomic, readonly, copy) NSString * _Nullable newTransactionId;
/// Order’s status
@property (nonatomic, readonly, strong) FCOOrderStatus * _Nonnull status;
/// Generates a copy of a OrderSummary object
/// \param zone Zone
///
///
/// returns:
/// OrderSummary copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("PayAfterDeliveryType")
@interface FCOPayAfterDeliveryType : FCOCardType
@property (nonatomic, readonly, copy) NSString * _Nonnull birthdate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class FCOPaymentMethodCardStyle;

SWIFT_CLASS_NAMED("PaymentMethod")
@interface FCOPaymentMethod : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull holder;
@property (nonatomic, readonly, strong) FCOCardType * _Nonnull type;
@property (nonatomic, readonly, strong) FCOPaymentMethodCardStyle * _Nonnull style;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("PaymentMethodCardStyle")
@interface FCOPaymentMethodCardStyle : NSObject
/// Card’s image
@property (nonatomic, readonly, copy) NSURL * _Nullable image;
/// Card’s background color
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// Card’s text color
@property (nonatomic, readonly, strong) UIColor * _Nonnull textColor;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Implement this protocol to get notified with payment methods UI changes
SWIFT_PROTOCOL_NAMED("PaymentMethodsDelegate")
@protocol FCOPaymentMethodsDelegate
/// This delegate describes if the user tapped go to shopping when he doesn’t have any payment method stored
- (void)fastcheckoutDidRequestGoShopping;
@end


/// This class describe the data that belongs to a referrer
SWIFT_CLASS_NAMED("ReferrerDetails")
@interface FCOReferrerDetails : NSObject <NSCopying>
/// User’s id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// User’s email
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Generates a copy of a ReferrerDetails object
/// \param zone Zone
///
///
/// returns:
/// ReferrerDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class describe the settings of the SDK
SWIFT_CLASS_NAMED("Settings")
@interface FCOCoreSettings : NSObject <NSCopying>
/// A Boolean value that determines whether it’s enabled the usage of TouchID™/FaceID™
/// if the user’s device has support for it
/// The default value of this property is <em><em>true</em></em>.
@property (nonatomic) BOOL biometricAuthenticationEnabled;
/// A Boolean value that specify if logs are shown or not
/// The default value of this property is <em><em>false</em></em>
@property (nonatomic) BOOL debug;
/// Determines whether the user session is persisted across app launches.
/// Default is <em><em>true</em></em>.
@property (nonatomic) BOOL persistUserSession;
/// Determines whether the cart is shown before starting the checkout.
/// If you skip this step, the user is redirected to the checkout’s shipping or payment step automatically
/// Default is <em><em>false</em></em>
@property (nonatomic) BOOL skipShowCartAtBeginning;
/// Determines whether the SSL pinning is enabled or not.
/// Default is <em><em>false</em></em>
@property (nonatomic) BOOL pinning;
/// A key that describes the Fastcheckout environment (test/live)
/// Valid values are: <em>FastcheckoutLiveEnvironment</em> or <em>FastcheckoutTestEnvironment</em>
@property (nonatomic, copy) NSString * _Nonnull environmentKey;
/// A key that describes the if the merchant is going Fastcheckout or Connect API
/// Default is <em><em>true</em></em>
@property (nonatomic) BOOL anonymous;
/// Specify the app name that will be shown in the navigation bar
@property (nonatomic, copy) NSString * _Nullable appName;
/// Deep link to continue transaction finished in another app (via banking apps)
/// If you do not set <code>deepLinkScheme</code>, FCO SDK will not allow to open banking apps
/// to complete payment
@property (nonatomic, copy) NSString * _Nullable deepLinkScheme;
@property (nonatomic) BOOL inAppBrowser;
/// Initialize a new Settings
/// \param environment SDK environment key
///
///
/// returns:
/// Instance of Settings
- (nonnull instancetype)initWithEnvironment:(NSString * _Nonnull)environment OBJC_DESIGNATED_INITIALIZER;
/// Initialize a new Settings
/// \param environment SDK environment key
///
/// \param debug Boolean that indicates whether logs are enabled or not
///
/// \param biometricAuthenticationEnabled Boolean that indicates whether it’s enabled TouchID™/FaceID™
///
///
/// returns:
/// Instance of Settings
- (nonnull instancetype)initWithEnvironment:(NSString * _Nonnull)environment debug:(BOOL)debug biometricAuthenticationEnabled:(BOOL)biometricAuthenticationEnabled persistUserSession:(BOOL)persistUserSession skipShowCartAtBeginning:(BOOL)skipShowCartAtBeginning pinning:(BOOL)pinning anonymous:(BOOL)anonymous OBJC_DESIGNATED_INITIALIZER;
/// Creates a new Settings object with default values
///
/// returns:
/// Instance of Settings
+ (FCOCoreSettings * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
/// Generate a copy of Settings object
/// \param zone Zone
///
///
/// returns:
/// Settings copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class describe the data that belongs to
/// a shipping address
SWIFT_CLASS_NAMED("ShippingAddress")
@interface FCOShippingAddress : NSObject <NSCopying>
/// Shipping address Identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// First name
@property (nonatomic, readonly, copy) NSString * _Nonnull firstName;
/// Last name
@property (nonatomic, readonly, copy) NSString * _Nonnull lastName;
/// Address 1
@property (nonatomic, readonly, copy) NSString * _Nonnull address1;
/// Address 2 <em>(optional)</em>
@property (nonatomic, readonly, copy) NSString * _Nullable address2;
/// Address 3 <em>(optional)</em>
@property (nonatomic, readonly, copy) NSString * _Nullable address3;
/// House number
@property (nonatomic, readonly, copy) NSString * _Nonnull number;
/// Zip code
@property (nonatomic, readonly, copy) NSString * _Nonnull zip;
/// City
@property (nonatomic, readonly, copy) NSString * _Nonnull city;
/// Country
@property (nonatomic, readonly, copy) NSString * _Nonnull country;
/// Country Code (ISO 4217)
@property (nonatomic, readonly, copy) NSString * _Nonnull countryCode;
/// Shipping address image url
@property (nonatomic, readonly, copy) NSURL * _Nullable image;
/// Address alias
@property (nonatomic, readonly, copy) NSString * _Nullable alias;
/// Is default Address
@property (nonatomic, readonly) BOOL isDefault;
/// Generates a copy of a ShippingAddress object
/// \param zone Zone
///
///
/// returns:
/// ShippingAddress copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Implement this protocol to get notified with shipping addresses module changes
SWIFT_PROTOCOL_NAMED("ShippingAddressesDelegate")
@protocol FCOShippingAddressesDelegate
/// This delegate describes if the user added a new shipping address
- (void)fastcheckoutDidAddAddress;
/// This delegate describes if the user updated a new shipping address
- (void)fastcheckoutDidUpdateAddress;
@end


/// This class describe the shipping details of an order
SWIFT_CLASS_NAMED("ShippingDetails")
@interface FCOShippingDetails : NSObject <NSCopying>
/// Shipping address
@property (nonatomic, readonly, copy) NSString * _Nonnull address;
/// Carrier (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable carrier;
/// Shipping date (<em>optional</em>)
@property (nonatomic, readonly, copy) NSDate * _Nullable date;
/// Track and trace code (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable trackingId;
/// Shipping comment (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable comment;
/// Generates a copy of a ShippingDetails object
/// \param zone Zone
///
///
/// returns:
/// ShippingDetails copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, FCOShippingStatus, "ShippingStatus", open) {
  FCOShippingStatusEmpty = 0,
  FCOShippingStatusShipped = 1,
  FCOShippingStatusDelivered = 2,
  FCOShippingStatusUndefined = 3,
};


/// This class describe the data that belongs to a merchant’s site
SWIFT_CLASS_NAMED("Site")
@interface FCOSite : NSObject <NSCopying>
/// Site’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Site’s url
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
/// Generates a copy of a Site object
/// \param zone Zone
///
///
/// returns:
/// Site copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Social Providers supported to sign up/login
/// <ul>
///   <li>
///     GOOGLE
///   </li>
///   <li>
///     FACEBOOK
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, FCOSocialProvider, "SocialProvider", open) {
/// Google
  FCOSocialProviderGoogle = 0,
/// Facebook
  FCOSocialProviderFacebook = 1,
};


/// This class describe the status of a finished transaction.
/// When a transaction ends, it returns a status detailing what happened.
SWIFT_CLASS_NAMED("Status")
@interface FCOStatus : NSObject <NSCopying>
/// Boolean value that indicates if the transaction has ended successfully or not <em>(read-only)</em>
@property (nonatomic, readonly) BOOL success;
/// Fastcheckout transaction state description <em>(read-only)</em>
@property (nonatomic, readonly) enum FCOTransactionState state;
/// Localized description of the state <em>(read-only)</em>
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Transaction Id
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionId;
/// Generates a copy of a Status object
/// \param zone Zone
///
///
/// returns:
/// Status copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end































/// This class describe the data that belongs to
/// the current active user
SWIFT_CLASS_NAMED("UserInfo")
@interface FCOUserInfo : NSObject <NSCopying>
/// User’s name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// User’s email
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// User’s id
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// User’s last login (<em>optional</em>)
@property (nonatomic, readonly, copy) NSDate * _Nullable lastLogin;
/// User’s referral (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable referral;
/// User’s cashback (<em>optional</em>)
@property (nonatomic, readonly, copy) NSString * _Nullable cashback;
/// Generates a copy of a UserInfo object
/// \param zone Zone
///
///
/// returns:
/// UserInfo copy
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol FCOUserSessionDelegate;
@class FCOWish;

/// This class acts as the handler of the changes done in the user
/// session. This class also exposes methods that can be performed on
/// behalf of the active user.
SWIFT_CLASS_NAMED("UserSession")
@interface FCOUserSession : NSObject
/// Delegate for receiving user session messages
@property (nonatomic, weak) id <FCOUserSessionDelegate> _Nullable delegate;
/// Check if the user is logged in
@property (nonatomic, readonly) BOOL isUserLoggedIn;
/// Start a request to the user’s balance. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the balance.
/// \param completion Tuple with a balance or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))balanceWithCompletion:(void (^ _Nonnull)(FCOBalance * _Nullable, NSError * _Nullable))completion;
/// Start a request to get the user’s list of orders. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned a list of orders
/// \param completion Tuple with a orders or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))ordersFrom:(NSInteger)start count:(NSInteger)count completion:(void (^ _Nonnull)(NSArray<FCOOrderSummary *> * _Nullable, NSError * _Nullable))completion;
/// Start a request to get the details of an order. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the balance.
/// \param completion Tuple with a details or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))orderDetailsWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(FCOOrderDetails * _Nullable, NSError * _Nullable))completion;
/// Start a request to get the user’s list of shipping addresses. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the list of shipping addresses.
/// \param completion Tuple with a list of addresses or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))shippingAddressesWithCompletion:(void (^ _Nonnull)(NSArray<FCOShippingAddress *> * _Nullable, NSError * _Nullable))completion;
/// Start a request to remove a shipping address. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the list of shipping addresses.
/// \param completion Tuple with a list of addresses or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))deleteShippingAddressWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSArray<FCOShippingAddress *> * _Nullable, NSError * _Nullable))completion;
/// Retrieve the data of the current active user. If there is no active user, returns nil.
///
/// returns:
/// UserInfo? instance.
- (FCOUserInfo * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Start a request to get an invitation. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the invitation.
/// \param completion Tuple with an invitation or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))invitationWithCompletion:(void (^ _Nonnull)(FCOInvitation * _Nullable, NSError * _Nullable))completion;
/// Request BiometricAuthentication status for current user in Fastcheckout
///
/// returns:
/// BiometricAuthentication status
- (enum FCOBiometricAuthenticationStatus)biometricAuthenticationStatus SWIFT_WARN_UNUSED_RESULT;
/// Set BiometricAuthentication usage in Fastcheckout
/// \param enabled Enable or disable BiometricAuthentication usage in Fastcheckout
///
///
/// returns:
/// Updated BiometricAuthentication status
- (enum FCOBiometricAuthenticationStatus)setBiometricAuthenticationWithEnabled:(BOOL)enabled SWIFT_WARN_UNUSED_RESULT;
- (void (^ _Nullable)(void))wishlistWithCompletion:(void (^ _Nonnull)(NSArray<FCOWish *> * _Nullable, NSError * _Nullable))completion;
- (void (^ _Nullable)(void))setWishlist:(NSArray<FCOWish *> * _Nonnull)wishlist completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Start a request to get the user’s list of messages. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned the list of messages.
/// \param from Pagination starts from this position
///
/// \param count Pagination size
///
/// \param filter Filter applied to pagination (inbox/outbox)
///
/// \param completion Tuple with a list of messages or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))messagesFrom:(NSInteger)start count:(NSInteger)count filterBy:(enum FCOMessagesFilter)filter completion:(void (^ _Nonnull)(NSArray<FCOMessage *> * _Nullable, NSError * _Nullable))completion;
/// Start a request to get the details of a message. If something goes wrong during the request, an error is returned.
/// Otherwise, it is returned its data.
/// \param id Message identifier
///
/// \param completion Tuple with details or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))messageDetailsWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(FCOMessageDetails * _Nullable, NSError * _Nullable))completion;
/// Start a request to get unread messages counter. If something goes wrong during the request, an error is returned.
/// \param filterBy Unreads message counter (inbox/outbox)
///
/// \param completion Tuple with counter or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))unreadMessagesWithFilterBy:(enum FCOMessagesFilter)filter completion:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completion;
/// Start a request to mark as read/unread a message. If something goes wrong during the request, an error is returned.
/// \param id Message identifier
///
/// \param read Indicates whether the message should be read or unread
///
/// \param completion Tuple with success or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))markAsReadWithId:(NSString * _Nonnull)id read:(BOOL)read completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Start a request to delete a message. If something goes wrong during the request, an error is returned.
/// \param id Message identifier
///
/// \param completion Tuple with success or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))deleteMessageWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Start a request to reply to a message. If something goes wrong during the request, an error is returned.
/// \param parentId Message’s parent identifier
///
/// \param content Reply body
///
/// \param completion Tuple with success or error
///
///
/// returns:
/// CancelClosure responsible for returning the server’s response
- (void (^ _Nullable)(void))replyMessageWithParentId:(NSString * _Nonnull)id content:(NSString * _Nonnull)content completion:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completion;
/// Start a request to get the user’s preferred payment methods. If something goes wrong during the request, an error is returned.
/// Otherwise, the list of payment methods is returned.
/// \param completion Tuple with payment methods or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))paymentMethodsWithCompletion:(void (^ _Nonnull)(NSArray<FCOPaymentMethod *> * _Nullable, NSError * _Nullable))completion;
/// Start a request to delete a preferred payment methods. If something goes wrong during the request, an error is returned.
/// Otherwise, the new list of payment methods is returned.
/// \param completion Tuple with payment methods or error
///
///
/// returns:
/// URLSessionDataTask responsible for returning the server’s response
- (void (^ _Nullable)(void))deletePaymentMethodWithId:(NSString * _Nonnull)id completion:(void (^ _Nonnull)(NSArray<FCOPaymentMethod *> * _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Implement this protocol to get notified with latest changes in user session
SWIFT_PROTOCOL_NAMED("UserSessionDelegate")
@protocol FCOUserSessionDelegate
/// This delegate describes if there has been a change in the user session
/// \param userSession Instance of UserSession
///
/// \param isUserLoggedIn Boolean
///
- (void)userSession:(FCOUserSession * _Nonnull)userSession didChangeLoginStatus:(BOOL)isUserLoggedIn;
@end


SWIFT_CLASS_NAMED("Wish")
@interface FCOWish : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
@property (nonatomic, readonly, copy) NSString * _Nonnull siteId;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nullable desc;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable imageURL;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id siteId:(NSString * _Nonnull)siteId appId:(NSString * _Nonnull)appId name:(NSString * _Nonnull)name desc:(NSString * _Nullable)desc url:(NSURL * _Nonnull)url imageURL:(NSURL * _Nullable)imageURL OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
